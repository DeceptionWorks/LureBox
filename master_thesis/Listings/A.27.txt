input {
        # use jdbc as input for this log source
        jdbc {
                jdbc_validate_connection => true
                jdbc_connection_string => "jdbc:oracle:thin:@192.168.56.1:1521/orcl"
                jdbc_user => "auditor"
                jdbc_password => "oracle"
                jdbc_driver_library => "/opt/jdbc/oracle/ojdbc8.jar"
                jdbc_driver_class => "Java::oracle.jdbc.driver.OracleDriver"
                statement => "select event_timestamp, audit_type, unified_audit_policies, fga_policy_name, action_name, return_code, object_schema, object_name, sql_text,
                os_username, userhost, client_program_name, terminal, dbid, authentication_type, dbusername, entry_id from unified_audit_trail where event_timestamp >= :sql_last_value"
                clean_run => "false"
                record_last_run => "true"
                last_run_metadata_path => "/etc/logstash/last_run/jdbc_last_run_oracle"
                schedule => "* * * * *"
       }
}
filter {
        grok {
                match => { "authentication_type" => "\TYPE=\(%{WORD}\)\)\;\(CLIENT ADDRESS=\(\(ADDRESS=\(PROTOCOL=%{WORD:protocol}\) \(HOST=%{IP:srcip}\)\(PORT=%{INT:srcport}\)\)\)\)\;" }
        }

        # add information about the origin of the log source
        mutate { add_field => ["[log_source][received_at]", "%{@timestamp}"] }
        mutate { add_field => ["[log_source][host]", "192.168.56.1"] }
        mutate { add_field => ["[log_source][product]", "Oracle Database 12c"] }

        # summarize fields about the source
        mutate { rename => {"[userhost]" => "[src][hostname]"} }
        mutate { rename => {"[terminal]" => "[src][terminal]"} }
        mutate { rename => {"[srcip]" => "[src][ip]"} }
        mutate { rename => {"[os_username]" => "[src][client_username]"} }
        mutate { rename => {"[srcport]" => "[src][port]"} }
        mutate { rename => {"[protocol]" => "[src][protocol]"} }
        mutate { rename => {"[client_program_name]" => "[src][client_program]"} }

        # summarize fields about the audit
        mutate { rename => {"[action_name]" => "[audit][action]"} }
        mutate { rename => {"[audit_type]" => "[audit][type]"} }
        mutate { rename => {"[object_name]" => "[audit][object][name]"} }
        mutate { rename => {"[dbusername]" => "[audit][database][username]"} }
        mutate { rename => {"[dbid]" => "[audit][database][id]"} }
        mutate { rename => {"[object_schema]" => "[audit][object][schema]"} }
        mutate { rename => {"[sql_text]" => "[audit][query][text]"} }
        mutate { rename => {"[return_code]" => "[audit][query][return_code]"} }
        mutate { rename => {"[unified_audit_policies]" => "[audit][policy]"} }
        if [fga_policy_name] { # check if the field fga_policy_name is existing
                mutate { rename => {"[fga_policy_name]" => "[audit][policy]"} }
        }

        mutate { rename => {"[entry_id]" => "[ID]"} }

        # use the field event_timestamp as timestamp for the event
        mutate { convert => ["event_timestamp" , "string"] }
        date { match => ["event_timestamp", "ISO8601"] }

         # remove unnecessary fields
        mutate { remove_field => ["event_timestamp","authentication_type","fga_policy_name","ID"] }
}
output {
        # uncomment the following line for getting a debug output in logstash
        # stdout { codec => rubydebug}

        # write the output to the elasticsearch datbase
        elasticsearch {
                hosts => ["127.0.0.1:9200"]
                index => "audit_databases_oracle-%{+YYYY.MM.dd}"
        }
}
